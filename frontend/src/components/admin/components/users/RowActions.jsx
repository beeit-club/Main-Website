// src/components/admin/components/users/RowActions.jsx
import React, { useState } from "react";
import {
  DropdownMenu,
  DropdownMenuTrigger,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuSeparator,
} from "@/components/ui/dropdown-menu";
import { Button } from "@/components/ui/button";
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogFooter,
  DialogDescription,
} from "@/components/ui/dialog";
import { Label } from "@/components/ui/label"; // !! ƒê√É X√ìA: Form, Input, Select, Textarea...
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import { Badge } from "@/components/ui/badge";

// !! ƒê√É X√ìA: useForm, yupResolver, userUpdateSchema

import { usersServices } from "@/services/admin/users";
import { toast } from "sonner";
import { formatDate } from "@/lib/datetime";
import {
  MoreHorizontal,
  Pencil,
  Eye,
  Trash,
  User,
  ToggleLeft,
  ToggleRight,
  RefreshCcw,
  Trash2,
  Mail,
  Phone,
  Briefcase,
  BookUser,
  CalendarDays,
} from "lucide-react";

// Helper function ƒë·ªÉ l·∫•y 2 ch·ªØ c√°i ƒë·∫ßu
const getInitials = (name) => {
  if (!name) return "U";
  const names = name.split(" ");
  const initials = names.map((n) => n[0]).join("");
  return initials.substring(0, 2).toUpperCase();
};

export function RowActions({ row, viewMode = "active" }) {
  console.log("üöÄ ~ RowActions ~ viewMode:", viewMode);
  // States cho c√°c dialog
  const [openDelete, setOpenDelete] = useState(false);
  const [openView, setOpenView] = useState(false);
  const [openPermanentDelete, setOpenPermanentDelete] = useState(false);
  // !! ƒê√É X√ìA: [openEdit, setOpenEdit]

  // States loading
  const [isDeleteSubmitting, setIsDeleteSubmitting] = useState(false);
  const [isToggleSubmitting, setIsToggleSubmitting] = useState(false);
  const [isRestoreSubmitting, setIsRestoreSubmitting] = useState(false);
  const [isPermDeleteSubmitting, setIsPermDeleteSubmitting] = useState(false);

  // State ch·ª©a data chi ti·∫øt
  const [userDataForView, setUserDataForView] = useState(null);
  // !! ƒê√É X√ìA: [rolesList, setRolesList]

  const userId = row.original.id;
  const userName = row.original.fullname;
  const isActive = row.original.is_active;

  // !! ƒê√É X√ìA: C·∫•u h√¨nh React Hook Form (cho Edit)

  // --- H√†m reload trang ---
  const reloadPage = () => window.location.reload();

  // --- X·ª≠ l√Ω X√ìA M·ªÄM (Active View) ---
  async function onConfirmDelete() {
    setIsDeleteSubmitting(true);
    try {
      const res = await usersServices.deleteUser(userId);
      if (res.status == "success") {
        toast.success("V√¥ hi·ªáu h√≥a user th√†nh c√¥ng");
        setOpenDelete(false);
        reloadPage();
      } else {
        toast.error(res.message || "V√¥ hi·ªáu h√≥a th·∫•t b·∫°i");
      }
    } catch (error) {
      toast.error("C√≥ l·ªói x·∫£y ra khi x√≥a user.");
    } finally {
      setIsDeleteSubmitting(false);
    }
  }

  // --- X·ª≠ l√Ω X√ìA Vƒ®NH VI·ªÑN (Trash View) ---
  async function onConfirmPermanentDelete() {
    setIsPermDeleteSubmitting(true);
    try {
      const res = await usersServices.hardDeleteUser(userId);
      if (res.status == "success") {
        toast.success("X√≥a user vƒ©nh vi·ªÖn th√†nh c√¥ng");
        setOpenPermanentDelete(false);
        reloadPage();
      } else {
        toast.error(res.message || "X√≥a vƒ©nh vi·ªÖn th·∫•t b·∫°i");
      }
    } catch (error) {
      toast.error("C√≥ l·ªói x·∫£y ra.");
    } finally {
      setIsPermDeleteSubmitting(false);
    }
  }

  // --- X·ª≠ l√Ω KH√îI PH·ª§C (Trash View) ---
  async function onRestore() {
    setIsRestoreSubmitting(true);
    try {
      const res = await usersServices.restoreUser(userId);
      if (res.status == "success") {
        toast.success("Kh√¥i ph·ª•c user th√†nh c√¥ng");
        reloadPage();
      } else {
        toast.error(res.message || "Kh√¥i ph·ª•c th·∫•t b·∫°i");
      }
    } catch (error) {
      toast.error("C√≥ l·ªói x·∫£y ra.");
    } finally {
      setIsRestoreSubmitting(false);
    }
  }

  // --- X·ª≠ l√Ω B·∫¨T/T·∫ÆT TR·∫†NG TH√ÅI (Active View) ---
  async function onToggleActive() {
    setIsToggleSubmitting(true);
    try {
      const res = await usersServices.toggleUserActive(userId, {
        is_active: isActive ? 0 : 1, // G·ª≠i gi√° tr·ªã ng∆∞·ª£c l·∫°i
      });
      if (res.status == "success") {
        toast.success("Thay ƒë·ªïi tr·∫°ng th√°i th√†nh c√¥ng");
        reloadPage();
      } else {
        toast.error(res.message || "Thay ƒë·ªïi tr·∫°ng th√°i th·∫•t b·∫°i");
      }
    } catch (error) {
      toast.error("C√≥ l·ªói x·∫£y ra.");
    } finally {
      setIsToggleSubmitting(false);
    }
  }

  // --- X·ª≠ l√Ω XEM CHI TI·∫æT ---
  async function onViewClick() {
    if (!userDataForView || userDataForView.id !== userId) {
      try {
        const res = await usersServices.getUserById(userId);
        if (res.status == "success") {
          setUserDataForView(res.data.user);
          setOpenView(true);
        } else {
          toast.error("L·∫•y chi ti·∫øt user th·∫•t b·∫°i");
        }
      } catch (error) {
        toast.error("C√≥ l·ªói x·∫£y ra khi l·∫•y d·ªØ li·ªáu.");
      }
    } else {
      setOpenView(true);
    }
  }

  // !! ƒê√É X√ìA: Logic S·ª≠a (onEditClick, onConfirmEdit, handleCloseEditDialog)

  return (
    <>
      {/* --- N√∫t b·∫•m trigger (3 ch·∫•m) --- */}
      <DropdownMenu>
        <DropdownMenuTrigger asChild>
          <Button variant="ghost" size="icon" aria-label="Open actions">
            <MoreHorizontal className="h-4 w-4" />
          </Button>
        </DropdownMenuTrigger>
        <DropdownMenuContent align="end">
          {/* == C√°c h√†nh ƒë·ªông cho View "Active" == */}
          {viewMode === "active" && (
            <>
              {/* !! ƒê√É X√ìA: DropdownMenuItem (Ch·ªânh s·ª≠a) */}
              <DropdownMenuItem onClick={onViewClick}>
                <Eye className="mr-2 h-4 w-4" />
                Xem chi ti·∫øt
              </DropdownMenuItem>
              <DropdownMenuItem
                onClick={onToggleActive}
                disabled={isToggleSubmitting}
              >
                {isActive ? (
                  <ToggleLeft className="mr-2 h-4 w-4" />
                ) : (
                  <ToggleRight className="mr-2 h-4 w-4" />
                )}
                {isActive ? "V√¥ hi·ªáu h√≥a" : "K√≠ch ho·∫°t"}
              </DropdownMenuItem>
              <DropdownMenuSeparator />
              <DropdownMenuItem
                onClick={() => setOpenDelete(true)}
                className="text-red-600"
              >
                <Trash className="mr-2 h-4 w-4" />
                X√≥a (L∆∞u tr·ªØ)
              </DropdownMenuItem>
            </>
          )}

          {/* == C√°c h√†nh ƒë·ªông cho View "Trash" == */}
          {viewMode === "trash" && (
            <>
              <DropdownMenuItem
                onClick={onRestore}
                disabled={isRestoreSubmitting}
                className="text-green-600"
              >
                <RefreshCcw className="mr-2 h-4 w-4" />
                Kh√¥i ph·ª•c
              </DropdownMenuItem>
              <DropdownMenuItem
                onClick={() => setOpenPermanentDelete(true)}
                className="text-red-600"
              >
                <Trash2 className="mr-2 h-4 w-4" />
                X√≥a vƒ©nh vi·ªÖn
              </DropdownMenuItem>
            </>
          )}
        </DropdownMenuContent>
      </DropdownMenu>

      {/* --- 1. Dialog X√≥a M·ªÄM (Active) --- */}
      <Dialog open={openDelete} onOpenChange={setOpenDelete}>
        <DialogContent>
          <DialogHeader>
            <DialogTitle>X√°c nh·∫≠n X√≥a (L∆∞u tr·ªØ)</DialogTitle>
          </DialogHeader>
          <div className="py-4">
            B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a user <strong>{userName}</strong>? User s·∫Ω ƒë∆∞·ª£c
            chuy·ªÉn v√†o th√πng r√°c.
          </div>
          <DialogFooter>
            <Button
              variant="ghost"
              onClick={() => setOpenDelete(false)}
              disabled={isDeleteSubmitting}
            >
              Hu·ª∑
            </Button>
            <Button
              variant="destructive"
              onClick={onConfirmDelete}
              disabled={isDeleteSubmitting}
            >
              {isDeleteSubmitting ? "ƒêang x√≥a..." : "X√°c nh·∫≠n"}
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>

      {/* --- 2. Dialog X√≥a Vƒ®NH VI·ªÑN (Trash) --- */}
      <Dialog open={openPermanentDelete} onOpenChange={setOpenPermanentDelete}>
        <DialogContent>
          <DialogHeader>
            <DialogTitle>X√°c nh·∫≠n X√ìA Vƒ®NH VI·ªÑN</DialogTitle>
            <DialogDescription>
              H√†nh ƒë·ªông n√†y kh√¥ng th·ªÉ ho√†n t√°c.
            </DialogDescription>
          </DialogHeader>
          <div className="py-4">
            B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a vƒ©nh vi·ªÖn user <strong>{userName}</strong>?
            To√†n b·ªô d·ªØ li·ªáu li√™n quan c√≥ th·ªÉ b·ªã m·∫•t.
          </div>
          <DialogFooter>
            <Button
              variant="ghost"
              onClick={() => setOpenPermanentDelete(false)}
              disabled={isPermDeleteSubmitting}
            >
              Hu·ª∑
            </Button>
            <Button
              variant="destructive"
              onClick={onConfirmPermanentDelete}
              disabled={isPermDeleteSubmitting}
            >
              {isPermDeleteSubmitting ? "ƒêang x√≥a..." : "X√≥a vƒ©nh vi·ªÖn"}
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>

      {/* --- 3. Dialog Xem Chi Ti·∫øt (Gi·ªØ nguy√™n) --- */}
      <Dialog open={openView} onOpenChange={setOpenView}>
        <DialogContent className="sm:max-w-xl">
          <DialogHeader>
            <div className="flex items-center gap-4">
              <Avatar className="h-16 w-16">
                <AvatarImage
                  src={userDataForView?.avatar_url}
                  alt={userDataForView?.fullname}
                />
                <AvatarFallback>
                  {getInitials(userDataForView?.fullname)}
                </AvatarFallback>
              </Avatar>
              <div>
                <DialogTitle className="text-2xl">
                  {userDataForView?.fullname}
                </DialogTitle>
                <DialogDescription>{userDataForView?.email}</DialogDescription>
              </div>
            </div>
          </DialogHeader>

          <div className="py-4 space-y-4">
            {/* Tr·∫°ng th√°i v√† Vai tr√≤ */}
            <div className="flex gap-4">
              {userDataForView?.is_active ? (
                <Badge variant="default" className="bg-green-600">
                  Ho·∫°t ƒë·ªông
                </Badge>
              ) : (
                <Badge variant="outline">V√¥ hi·ªáu h√≥a</Badge>
              )}
              <Badge variant="secondary">{userDataForView?.role?.name}</Badge>
            </div>

            {/* Th√¥ng tin c√° nh√¢n */}
            <div className="space-y-2">
              <h4 className="font-semibold">Th√¥ng tin c√° nh√¢n</h4>
              <div className="grid grid-cols-2 gap-2 text-sm">
                <div className="flex items-center gap-2">
                  <Phone className="h-4 w-4 text-muted-foreground" />
                  <span>{userDataForView?.phone || "Ch∆∞a c·∫≠p nh·∫≠t"}</span>
                </div>
                <div className="flex items-center gap-2">
                  <Mail className="h-4 w-4 text-muted-foreground" />
                  <span>
                    {userDataForView?.email_verified_at
                      ? "ƒê√£ x√°c th·ª±c"
                      : "Ch∆∞a x√°c th·ª±c"}
                  </span>
                </div>
              </div>
              <div className="flex items-start gap-2 text-sm">
                <BookUser className="h-4 w-4 text-muted-foreground mt-1" />
                <p>{userDataForView?.bio || "Ch∆∞a c√≥ ti·ªÉu s·ª≠."}</p>
              </div>
            </div>

            {/* Th√¥ng tin th√†nh vi√™n (T·ª´ b·∫£ng member_profiles) */}
            {userDataForView?.memberProfile && (
              <div className="space-y-2 pt-4 border-t">
                <h4 className="font-semibold">Th√¥ng tin th√†nh vi√™n CLB</h4>
                <div className="grid grid-cols-2 gap-2 text-sm">
                  <div className="flex items-center gap-2">
                    <User className="h-4 w-4 text-muted-foreground" />
                    <strong>MSSV:</strong>
                    <span>{userDataForView.memberProfile.student_id}</span>
                  </div>
                  <div className="flex items-center gap-2">
                    <Briefcase className="h-4 w-4 text-muted-foreground" />
                    <strong>Kh√≥a:</strong>
                    <span>{userDataForView.memberProfile.course}</span>
                  </div>
                </div>
              </div>
            )}

            {/* Th√¥ng tin h·ªá th·ªëng */}
            <div className="space-y-2 pt-4 border-t">
              <h4 className="font-semibold">Th√¥ng tin h·ªá th·ªëng</h4>
              <div className="grid grid-cols-2 gap-2 text-sm">
                <div className="flex items-center gap-2">
                  <CalendarDays className="h-4 w-4 text-muted-foreground" />
                  <span>
                    Ng√†y tham gia: {formatDate(userDataForView?.created_at)}
                  </span>
                </div>
                <div className="flex items-center gap-2">
                  <Pencil className="h-4 w-4 text-muted-foreground" />
                  <span>
                    C·∫≠p nh·∫≠t: {formatDate(userDataForView?.updated_at)}
                  </span>
                </div>
              </div>
            </div>
          </div>

          <DialogFooter>
            <Button variant="outline" onClick={() => setOpenView(false)}>
              ƒê√≥ng
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>

      {/* !! ƒê√É X√ìA: Dialog S·ª≠a */}
    </>
  );
}
