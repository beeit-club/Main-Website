"use client";

import React, { useEffect, useRef, useState } from "react";
import { useForm, Controller } from "react-hook-form";
import { yupResolver } from "@hookform/resolvers/yup";
import { postSchema } from "@/validation/postSchema"; // Import schema validation
import { postServices } from "@/services/admin/post"; // Import service
import TinyEditor from "@/components/TinyEditor/TinyEditor"; // Editor c·ªßa b·∫°n

// --- Import c√°c component c·ªßa shadcn/ui ---
// (Gi·∫£ s·ª≠ b·∫°n ƒë√£ c√†i ƒë·∫∑t c√°c component n√†y)
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { Label } from "@/components/ui/label";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import {
  Form,
  FormControl,
  FormDescription,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Checkbox } from "@/components/ui/checkbox";
import { ScrollArea } from "@/components/ui/scroll-area";
import { toast } from "sonner";
// Gi·∫£ s·ª≠ b·∫°n c√≥ component Toast
// import { useToast } from "@/components/ui/use-toast";

function AddPost() {
  const [categories, setCategories] = useState([]);
  const editorRef = useRef(null);
  const [tags, setTags] = useState([]);
  const [imagePreview, setImagePreview] = useState(null);
  const [isSubmitting, setIsSubmitting] = useState(false);
  // 1. Kh·ªüi t·∫°o react-hook-form
  const form = useForm({
    resolver: yupResolver(postSchema),
    defaultValues: {
      title: "",
      meta_description: "",
      category_id: "",
      status: "0", // M·∫∑c ƒë·ªãnh l√† b·∫£n nh√°p
      tags: [],
      featured_image: undefined,
    },
  });

  // 2. Fetch d·ªØ li·ªáu cho categories v√† tags
  useEffect(() => {
    const fetchData = async () => {
      try {
        const [catRes, tagRes] = await Promise.all([
          postServices.getAllcategory(),
          postServices.getAlltags(),
        ]);
        console.log("üöÄ ~ fetchData ~ tagRes:", tagRes);
        console.log("üöÄ ~ fetchData ~ catRes:", catRes);
        setCategories(catRes?.data?.data.categories.data || []);
        setTags(tagRes?.data?.data.data || []);
      } catch (error) {
        console.error("Failed to fetch data:", error);
        // toast({ title: "L·ªói", description: "Kh√¥ng th·ªÉ t·∫£i danh m·ª•c ho·∫∑c th·∫ª." });
      }
    };
    fetchData();
  }, []);

  // 3. H√†m x·ª≠ l√Ω khi submit form
  const onSubmit = async (data) => {
    setIsSubmitting(true);
    console.log("Form Data:", data);
    const editorContent = editorRef.current
      ? editorRef.current.getContent()
      : "";
    if (!editorContent || editorContent.trim() === "") {
      toast({
        title: "L·ªói",
        description: "N·ªôi dung b√†i vi·∫øt kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng.",
      });
      return;
    }
    const formData = new FormData();
    formData.append("title", data.title);
    formData.append("content", editorContent);
    formData.append("meta_description", data.meta_description || "");
    formData.append("category_id", data.category_id);
    formData.append("status", data.status);

    // Th√™m ·∫£nh ƒë·∫°i di·ªán (n·∫øu c√≥)
    if (data.featured_image && data.featured_image.length > 0) {
      formData.append("featured_image", data.featured_image[0]);
    }

    // Th√™m c√°c tag (backend c√≥ th·ªÉ nh·∫≠n d·∫°ng 'tags[]')
    data.tags.forEach((tagId) => {
      formData.append("tags[]", tagId);
    });

    // B·∫°n c≈©ng c√≥ th·ªÉ g·ª≠i tags d∆∞·ªõi d·∫°ng JSON n·∫øu BE h·ªó tr·ª£
    // formData.append("tags", JSON.stringify(data.tags));

    // --- G·ª≠i l√™n server ---
    try {
      setIsSubmitting(true);
      await postServices.createPost(formData);
      // toast({ title: "Th√†nh c√¥ng", description: "ƒê√£ th√™m b√†i vi·∫øt m·ªõi." });
      alert("ƒê√£ th√™m b√†i vi·∫øt m·ªõi!"); // D√πng t·∫°m alert
      form.reset(); // Reset form
      setImagePreview(null);
      setIsSubmitting(false);
    } catch (error) {
      setIsSubmitting(false);
      console.error("Error creating post:", error);
      // toast({ title: "L·ªói", description: error.message || "Kh√¥ng th·ªÉ t·∫°o b√†i vi·∫øt." });
      alert("L·ªói: " + (error.message || "Kh√¥ng th·ªÉ t·∫°o b√†i vi·∫øt."));
    }
  };

  // 4. H√†m x·ª≠ l√Ω preview ·∫£nh
  const handleImageChange = (e, field) => {
    const file = e.target.files[0];
    if (file) {
      setImagePreview(URL.createObjectURL(file));
      field.onChange(e.target.files); // C·∫≠p nh·∫≠t react-hook-form
    } else {
      setImagePreview(null);
      field.onChange(undefined);
    }
  };

  return (
    <Form {...form}>
      <form
        onSubmit={form.handleSubmit(onSubmit)}
        className="container mx-auto max-w-7xl grid grid-cols-1 lg:grid-cols-3 gap-6 p-4"
      >
        {/* C·ªôt ch√≠nh (N·ªôi dung) */}
        <div className="lg:col-span-2 space-y-6">
          <Card>
            <CardHeader>
              <CardTitle>N·ªôi dung b√†i vi·∫øt</CardTitle>
            </CardHeader>
            <CardContent className="space-y-6">
              {/* Ti√™u ƒë·ªÅ */}
              <FormField
                control={form.control}
                name="title"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Ti√™u ƒë·ªÅ</FormLabel>
                    <FormControl>
                      <Input
                        placeholder="Ti√™u ƒë·ªÅ b√†i vi·∫øt c·ªßa b·∫°n..."
                        {...field}
                      />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
              <FormField
                control={form.control}
                name="meta_description"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>M√¥ t·∫£ Meta (SEO)</FormLabel>
                    <FormControl>
                      <Textarea
                        placeholder="M√¥ t·∫£ ng·∫Øn g·ªçn (t·ªëi ƒëa 160 k√Ω t·ª±) cho SEO..."
                        {...field}
                      />
                    </FormControl>
                    <FormDescription>
                      M√¥ t·∫£ n√†y s·∫Ω hi·ªÉn th·ªã tr√™n k·∫øt qu·∫£ t√¨m ki·∫øm Google.
                    </FormDescription>
                    <FormMessage />
                  </FormItem>
                )}
              />
              <FormItem>
                <FormLabel>N·ªôi dung</FormLabel>
                <FormControl>
                  <TinyEditor editorRef={editorRef} />
                </FormControl>
                <FormMessage />
              </FormItem>
            </CardContent>
          </Card>
        </div>

        {/* C·ªôt ph·ª• (Th√¥ng tin) */}
        <div className="lg:col-span-1 space-y-6">
          {/* Tr·∫°ng th√°i & ƒêƒÉng */}
          <Card>
            <CardHeader>
              <CardTitle>ƒêƒÉng b√†i</CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <FormField
                control={form.control}
                name="status"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Tr·∫°ng th√°i</FormLabel>
                    <Select
                      onValueChange={field.onChange}
                      defaultValue={field.value}
                    >
                      <FormControl>
                        <SelectTrigger>
                          <SelectValue placeholder="Ch·ªçn tr·∫°ng th√°i" />
                        </SelectTrigger>
                      </FormControl>
                      <SelectContent>
                        <SelectItem value="0">B·∫£n nh√°p</SelectItem>
                        <SelectItem value="1">C√¥ng khai</SelectItem>
                      </SelectContent>
                    </Select>
                    <FormMessage />
                  </FormItem>
                )}
              />
              <Button type="submit" className="w-full" disabled={isSubmitting}>
                {isSubmitting ? "ƒêang l∆∞u..." : "L∆∞u b√†i vi·∫øt"}
              </Button>
            </CardContent>
          </Card>

          {/* Danh m·ª•c */}
          <Card>
            <CardHeader>
              <CardTitle>Danh m·ª•c</CardTitle>
            </CardHeader>
            <CardContent>
              <FormField
                control={form.control}
                name="category_id"
                render={({ field }) => (
                  <FormItem>
                    <Select
                      onValueChange={field.onChange}
                      defaultValue={field.value}
                    >
                      <FormControl>
                        <SelectTrigger>
                          <SelectValue placeholder="Ch·ªçn danh m·ª•c" />
                        </SelectTrigger>
                      </FormControl>
                      <SelectContent>
                        {categories.map((cat) => (
                          <SelectItem key={cat.id} value={String(cat.id)}>
                            {cat.name}
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                    <FormMessage />
                  </FormItem>
                )}
              />
            </CardContent>
          </Card>

          {/* Th·∫ª (Tags) */}
          <Card>
            <CardHeader>
              <CardTitle>Th·∫ª (Tags)</CardTitle>
            </CardHeader>
            <CardContent>
              <FormField
                control={form.control}
                name="tags"
                render={() => (
                  <FormItem>
                    <ScrollArea className="h-48 w-full rounded-md border p-4">
                      {tags.map((tag) => (
                        <FormField
                          key={tag.id}
                          control={form.control}
                          name="tags"
                          render={({ field }) => {
                            return (
                              <FormItem
                                key={tag.id}
                                className="flex flex-row items-start space-x-3 space-y-0 mb-2"
                              >
                                <FormControl>
                                  <Checkbox
                                    checked={field.value?.includes(
                                      String(tag.id)
                                    )}
                                    onCheckedChange={(checked) => {
                                      const tagIdStr = String(tag.id);
                                      return checked
                                        ? field.onChange([
                                            ...(field.value || []),
                                            tagIdStr,
                                          ])
                                        : field.onChange(
                                            (field.value || []).filter(
                                              (value) => value !== tagIdStr
                                            )
                                          );
                                    }}
                                  />
                                </FormControl>
                                <FormLabel className="font-normal">
                                  {tag.name}
                                </FormLabel>
                              </FormItem>
                            );
                          }}
                        />
                      ))}
                    </ScrollArea>
                    <FormMessage />
                  </FormItem>
                )}
              />
            </CardContent>
          </Card>

          {/* ·∫¢nh ƒë·∫°i di·ªán */}
          <Card>
            <CardHeader>
              <CardTitle>·∫¢nh ƒë·∫°i di·ªán</CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              {imagePreview && (
                <img
                  src={imagePreview}
                  alt="Xem tr∆∞·ªõc ·∫£nh"
                  className="w-full h-auto rounded-md object-cover"
                />
              )}
              <FormField
                control={form.control}
                name="featured_image"
                render={({ field: { onChange, value, ...fieldProps } }) => (
                  <FormItem>
                    <FormControl>
                      <Input
                        type="file"
                        accept="image/png, image/jpeg, image/jpg, image/webp"
                        {...fieldProps}
                        onChange={(e) => handleImageChange(e, { onChange })}
                      />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
            </CardContent>
          </Card>
        </div>
      </form>
    </Form>
  );
}

export default AddPost;
