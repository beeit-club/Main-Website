import * as yup from 'yup';

const AnswerSchema = {
  create: yup.object({
    // üëá TH√äM D√íNG N√ÄY
    question_id: yup.number().required('ID c√¢u h·ªèi l√† b·∫Øt bu·ªôc').min(1),
    content: yup.string().trim().required('N·ªôi dung l√† b·∫Øt bu·ªôc'),
    parent_id: yup
      .number()
      .nullable()
      .transform((value, originalValue) =>
        String(originalValue).trim() === '' ? null : value,
      )
      .min(1, 'parent_id kh√¥ng h·ª£p l·ªá'),
    status: yup.number().oneOf([0, 1], 'Tr·∫°ng th√°i kh√¥ng h·ª£p l·ªá').default(1),
  }),

  update: yup
    .object({
      content: yup.string().trim().optional(),
      status: yup.number().oneOf([0, 1], 'Tr·∫°ng th√°i kh√¥ng h·ª£p l·ªá').optional(),
    })
    .test(
      'at-least-one-field', // T√™n c·ªßa test
      'Y√™u c·∫ßu √≠t nh·∫•t m·ªôt tr∆∞·ªùng ƒë·ªÉ c·∫≠p nh·∫≠t', // Th√¥ng b√°o l·ªói
      (value) => Object.keys(value).length > 0, // Logic test
    ),

  vote: yup.object({
    vote_type: yup
      .string()
      .oneOf(['upvote', 'downvote'], 'Lo·∫°i vote kh√¥ng h·ª£p l·ªá')
      .required('Lo·∫°i vote l√† b·∫Øt bu·ªôc'),
  }),
};

export default AnswerSchema;
