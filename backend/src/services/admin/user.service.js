import { code, message } from '../../common/message/index.js';
import ServiceError from '../../error/service.error.js';
import userModel from '../../models/admin/user.model.js';
import bcrypt from 'bcryptjs';

const userService = {
  /**
   * üìã L·∫•y danh s√°ch t·∫•t c·∫£ user (c√≥ ph√¢n trang)
   */
  getAllUser: async (option) => {
    try {
      const result = await userModel.getAllUsers(option);

      if (!result || !result.data || result.data.length === 0) {
        throw new ServiceError(
          message.User.USER_NOT_FOUND,
          code.User.USER_NOT_FOUND_CODE,
          'Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng n√†o',
          404,
        );
      }

      return result;
    } catch (error) {
      throw error;
    }
  },

  /**
   * üîπ L·∫•y th√¥ng tin chi ti·∫øt user theo ID
   */
  getUserById: async (id) => {
    try {
      if (!id) {
        throw new ServiceError(
          message.User.INVALID_ID,
          code.User.INVALID_ID_CODE,
          'Thi·∫øu ID ƒë·ªÉ t√¨m ki·∫øm',
          400,
        );
      }

      const user = await userModel.getUserById(id);
      console.log('üöÄ ~ user:', user);

      if (!user) {
        throw new ServiceError(
          message.User.USER_NOT_FOUND,
          code.User.USER_NOT_FOUND_CODE,
          'Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i trong h·ªá th·ªëng',
          404,
        );
      }

      return user;
    } catch (error) {
      throw error;
    }
  },

  /**
   * ‚ûï T·∫°o user m·ªõi
   */
  createUser: async (data) => {
    try {
      const { email, fullname, phone, role_id, bio } = data;

      // Ki·ªÉm tra email ƒë√£ t·ªìn t·∫°i ch∆∞a
      const existing = await userModel.findByEmail(email);
      if (existing) {
        throw new ServiceError(
          message.User.EMAIL_EXISTS,
          code.User.EMAIL_EXISTS_CODE,
          'Email n√†y ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng',
          400,
        );
      }

      // T·∫°o user data
      const userData = {
        email,
        fullname,
        phone: phone || null,
        role_id: role_id || 2,
        bio: bio || null,
        is_active: 1,
        email_verified_at: null,
      };

      const newUser = await userModel.createUser(userData);

      return newUser;
    } catch (error) {
      throw error;
    }
  },

  /**
   * ‚úèÔ∏è C·∫≠p nh·∫≠t th√¥ng tin user
   */
  updateUser: async (id, data) => {
    try {
      // Ki·ªÉm tra user t·ªìn t·∫°i
      const user = await userModel.getUserById(id);
      if (!user) {
        throw new ServiceError(
          message.User.USER_NOT_FOUND,
          code.User.USER_NOT_FOUND_CODE,
          'Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng ƒë·ªÉ c·∫≠p nh·∫≠t',
          404,
        );
      }

      // Ki·ªÉm tra email tr√πng l·∫∑p (n·∫øu c√≥ update email)
      if (data.email && data.email !== user.email) {
        const emailExists = await userModel.emailExists(data.email, id);
        if (emailExists) {
          throw new ServiceError(
            message.User.EMAIL_EXISTS,
            code.User.EMAIL_EXISTS_CODE,
            'Email ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng b·ªüi ng∆∞·ªùi d√πng kh√°c',
            400,
          );
        }
      }

      // Hash password n·∫øu c√≥ update
      if (data.password) {
        data.password = await bcrypt.hash(data.password, 10);
      }

      // Th·ª±c hi·ªán update
      const success = await userModel.updateUser(id, data);
      if (!success) {
        throw new ServiceError(
          message.User.NO_UPDATE,
          code.User.NO_UPDATE_CODE,
          'Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ c·∫≠p nh·∫≠t',
          400,
        );
      }

      // L·∫•y l·∫°i th√¥ng tin user sau khi update
      const updatedUser = await userModel.getUserById(id);
      delete updatedUser.password;

      return updatedUser;
    } catch (error) {
      throw error;
    }
  },

  /**
   * üóëÔ∏è X√≥a m·ªÅm user
   */
  deleteUser: async (id) => {
    try {
      // Ki·ªÉm tra user t·ªìn t·∫°i
      const user = await userModel.getUserById(id);
      if (!user) {
        throw new ServiceError(
          message.User.USER_NOT_FOUND,
          code.User.USER_NOT_FOUND_CODE,
          'Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i',
          404,
        );
      }

      // Th·ª±c hi·ªán soft delete
      const success = await userModel.softDeleteUser(id);
      if (!success) {
        throw new ServiceError(
          message.User.DELETE_FAILURE,
          code.User.USER_DELETE_FAILED_CODE,
          'X√≥a ng∆∞·ªùi d√πng th·∫•t b·∫°i',
          500,
        );
      }

      return true;
    } catch (error) {
      throw error;
    }
  },

  /**
   * üíÄ X√≥a vƒ©nh vi·ªÖn user
   */
  hardDeleteUser: async (id) => {
    try {
      // Ki·ªÉm tra user t·ªìn t·∫°i (c√≥ th·ªÉ ƒë√£ b·ªã soft delete)
      const deleted = await userModel.hardDeleteUser(id);
      console.log('üöÄ ~ deleted:', deleted);

      if (!deleted) {
        throw new ServiceError(
          message.User.USER_NOT_FOUND,
          code.User.USER_NOT_FOUND_CODE,
          'Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng ƒë·ªÉ x√≥a',
          404,
        );
      }

      return true;
    } catch (error) {
      throw error;
    }
  },

  /**
   * üîÑ K√≠ch ho·∫°t/v√¥ hi·ªáu h√≥a user
   */
  toggleUserActive: async (id, isActive) => {
    try {
      // Ki·ªÉm tra user t·ªìn t·∫°i
      const user = await userModel.getUserById(id);
      if (!user) {
        throw new ServiceError(
          message.User.USER_NOT_FOUND,
          code.User.USER_NOT_FOUND_CODE,
          'Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i',
          404,
        );
      }

      // Th·ª±c hi·ªán toggle active
      const success = await userModel.toggleActive(id, isActive);
      if (!success) {
        throw new ServiceError(
          message.User.UPDATE_FAILURE,
          code.User.UPDATE_FAILURE_CODE,
          'C·∫≠p nh·∫≠t tr·∫°ng th√°i th·∫•t b·∫°i',
          500,
        );
      }

      return true;
    } catch (error) {
      throw error;
    }
  },

  /**
   * ‚ôªÔ∏è Kh√¥i ph·ª•c user ƒë√£ x√≥a
   */
  restoreUser: async (id) => {
    try {
      // Th·ª±c hi·ªán restore
      const success = await userModel.restoreUser(id);

      if (!success) {
        throw new ServiceError(
          message.User.USER_NOT_FOUND_DELETED,
          code.User.USER_NOT_FOUND_DELETED_CODE,
          'Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng ƒë√£ x√≥a',
          404,
        );
      }

      return true;
    } catch (error) {
      throw error;
    }
  },

  /**
   * üìã L·∫•y danh s√°ch user ƒë√£ x√≥a
   */
  getDeletedUsers: async (option) => {
    try {
      const result = await userModel.getDeletedUsers(option);

      if (!result || !result.data || result.data.length === 0) {
        throw new ServiceError(
          message.User.NO_DELETED_USERS,
          code.User.NO_DELETED_USERS_CODE,
          'Kh√¥ng c√≥ ng∆∞·ªùi d√πng n√†o ƒë√£ b·ªã x√≥a',
          404,
        );
      }

      return result;
    } catch (error) {
      throw error;
    }
  },

  /**
   * üìä Th·ªëng k√™ user
   */
  getUserStats: async () => {
    try {
      const stats = await userModel.countUserStats();

      if (!stats) {
        throw new ServiceError(
          message.User.STATS_FAILURE,
          code.User.STATS_FAILURE_CODE,
          'Kh√¥ng th·ªÉ l·∫•y th·ªëng k√™ ng∆∞·ªùi d√πng',
          500,
        );
      }

      return stats;
    } catch (error) {
      throw error;
    }
  },
};

export default userService;
