import {
  findOne,
  insert,
  selectWithPagination,
  update,
} from '../../utils/database.js';
import { dateTime } from '../../utils/datetime.js';

class tagModel {
  // l·∫•y to√†n b·ªô
  static async getAllTag(options = {}) {
    try {
      let sql = `SELECT
  t.id,
  t.name,
  t.slug,
  t.meta_description,
  t.created_at,
  t.updated_at,
  t.created_by,
  t.updated_by,
  u.fullname AS created_by_name 
FROM
  tags AS t 
 LEFT JOIN users AS u ON t.created_by = u.id 
WHERE
  t.deleted_at IS NULL`;
      let params = [];

      if (options?.filters?.name) {
        sql += ` AND name LIKE ?`;
        params.push(`%${options.filters.name}%`);
      }
      const tags = await selectWithPagination(sql, params, options);
      return tags;
    } catch (error) {
      throw error;
    }
  }

  // l·∫•y 1
  static async getOneTag(id) {
    console.log('üöÄ ~ tagModel ~ getOneTag ~ id:', id);
    try {
      const sql = `SELECT
  t.id,
  t.name,
  t.slug,
  t.meta_description,
  t.created_at,
  t.updated_at,
  t.created_by,
  t.updated_by,
  u.fullname AS created_by_name 
FROM
  tags AS t 
 LEFT JOIN users AS u ON t.created_by = u.id 
WHERE t.id = ?  `;
      const result = await findOne(sql, [id]);
      return result;
    } catch (error) {
      throw error;
    }
  }

  // check xem ƒë√£ t·ªìn t·∫°i th·∫ª ch∆∞a
  static async checkIsTag(slug) {
    try {
      const sql = 'SELECT name FROM tags WHERE slug = ? AND deleted_at IS NULL';
      const result = await findOne(sql, [slug]);
      return result;
    } catch (error) {
      throw error;
    }
  }

  // th√™m
  static async createTag(tag) {
    try {
      const newTag = await insert('tags', tag);
      return newTag;
    } catch (error) {
      throw error;
    }
  }

  // update
  static async updateTag(id, tag) {
    try {
      const updatedTag = await update('tags', tag, { id: id });
      return updatedTag;
    } catch (error) {
      throw error;
    }
  }

  // x√≥a m·ªÅm
  static async deleteTag(id) {
    try {
      const time = dateTime();
      const result = await update('tags', { deleted_at: time }, { id: id });
      return result;
    } catch (error) {
      throw error;
    }
  }

  // kh√¥i ph·ª•c
  static async restoreTag(id) {
    try {
      const sql = `UPDATE tags SET deleted_at = NULL WHERE id = ?`;
      const result = await findOne(sql, [id]); // findOne c√≥ th·ªÉ kh√¥ng ph√π h·ª£p ·ªü ƒë√¢y, nh∆∞ng theo c·∫•u tr√∫c c≈©
      return result;
    } catch (error) {
      throw error;
    }
  }
}
export default tagModel;
